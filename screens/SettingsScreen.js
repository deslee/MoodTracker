import React, { Component } from 'react';
import { TouchableOpacity } from 'react-native';
import { Container, Text, CheckBox, ListItem, Body, View } from 'native-base';
import PushNotification from 'react-native-push-notification'
import DateTimePickerComponent from 'react-native-modal-datetime-picker';
import moment from 'moment';
import { bindData } from '../hocs/bindData';
import MoodTrackerManager from '../service/MoodTrackerManager';

export class SettingsScreenComponent extends Component {
  static navigationOptions = {
    title: 'Settings'
  };

  state = {
    showReminderTimePicker: false
  }

  componentDidMount() {
  }

  updateNotification = ({ reminderTime = new Date() }) => {
    console.log('doin a notification for ', new Date(reminderTime).getTime());
    PushNotification.localNotificationSchedule({
      // Android Only Properties 
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      // ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_launcher", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "Reminder", // (optional) default: none
      // color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      // tag: 'some_tag', // (optional) add tag to message
      // group: "group", // (optional) add group to message
      // ongoing: false, // (optional) set whether this is an "ongoing" notification
      // priority: "high", // (optional) set notification priority, default: high
      // visibility: "private", // (optional) set notification visibility, default: private
      // importance: "high", // (optional) set notification importance, default: high

      // iOS and Android properties 
      // title: "MoodTracker", // (optional)
      message: "Time to log an entry for today.", // (required)
      playSound: false, // (optional) default: true
      // soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      date: new Date(reminderTime),
      repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    });
  }

  setSetting = setting => {
    const {
      settings
    } = this.props;

    const updatedSettings = { ...settings, ...setting };

    MoodTrackerManager.saveSettings(updatedSettings)
      .then(() => this.updateNotification(updatedSettings))
  }

  render() {
    const {
      settings: {
        dailyRemindersOption,
        reminderTime
      }
    } = this.props;

    const { 
      showReminderTimePicker
    } = this.state;

    const toggleDailyreminders = () => this.setSetting({ dailyRemindersOption: !Boolean(dailyRemindersOption) });

    const dailyRemindersSetting = <ListItem onPress={toggleDailyreminders}>
      <Body>
        <Text>Daily reminders</Text>
        <Text>Reminds you every day to log an entry</Text>
      </Body>
      <CheckBox onPress={toggleDailyreminders} checked={dailyRemindersOption} />
    </ListItem>;

    const reminderTimeSetting = <ListItem>
      <Body>
        <Text>Remind at</Text>
        <View style={{ paddingLeft: 12 }}>
          <TouchableOpacity onPress={() => this.setState({ showReminderTimePicker: true })} style={{ borderBottomWidth: 1 }}>
            <Text>{moment(reminderTime).format('h:mm a')}</Text>
          </TouchableOpacity>
          <DateTimePickerComponent
            mode="time"
            titleIOS="Pick a time"
            isVisible={showReminderTimePicker}
            date={moment(reminderTime).toDate()}
            is24Hour={false}
            onConfirm={(date) => {
              this.setState({ showReminderTimePicker: false })
              this.setSetting({ reminderTime: date });
            }}
            onCancel={() => this.setState({ showReminderTimePicker: false })}
          />
        </View>
      </Body>
    </ListItem>;

    return (
      <Container>
        {dailyRemindersSetting}
        {dailyRemindersOption && reminderTimeSetting}

      </Container>
    );
  }
}

export default bindData(SettingsScreenComponent);